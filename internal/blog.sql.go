// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: blog.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const checkBlogByID = `-- name: CheckBlogByID :one
SELECT EXISTS(
    SELECT id, created_at, updated_at, deleted_at, user_id, title, content, image FROM blogs
    WHERE id = $1
    AND deleted_at IS NULL
)
`

func (q *Queries) CheckBlogByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkBlogByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs (user_id, title, content, image)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, deleted_at, user_id, title, content, image
`

type CreateBlogParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Image   string    `json:"image"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, createBlog,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Image,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Image,
	)
	return i, err
}

const deleteBlogByID = `-- name: DeleteBlogByID :exec
UPDATE
    blogs
SET
    deleted_at = NOW()
WHERE 
    id = $1
`

func (q *Queries) DeleteBlogByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBlogByID, id)
	return err
}

const getAllBlog = `-- name: GetAllBlog :many
SELECT id, created_at, updated_at, deleted_at, user_id, title, content, image FROM blogs
WHERE deleted_at IS NULL
ORDER BY
  CASE WHEN $1::bool THEN title END asc,
  CASE WHEN $2::bool THEN title END desc,
  CASE WHEN $3::bool THEN created_at END asc,
  CASE WHEN $4::bool THEN created_at END desc,
  CASE WHEN $5::bool THEN content END asc,
  CASE WHEN $6::bool THEN content END desc
LIMIT $8 OFFSET $7
`

type GetAllBlogParams struct {
	TitleAsc      bool  `json:"title_asc"`
	TitleDesc     bool  `json:"title_desc"`
	CreatedAtAsc  bool  `json:"created_at_asc"`
	CreatedAtDesc bool  `json:"created_at_desc"`
	ContentAsc    bool  `json:"content_asc"`
	ContentDesc   bool  `json:"content_desc"`
	Offset        int32 `json:"offset"`
	Limit         int32 `json:"limit"`
}

func (q *Queries) GetAllBlog(ctx context.Context, arg GetAllBlogParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlog,
		arg.TitleAsc,
		arg.TitleDesc,
		arg.CreatedAtAsc,
		arg.CreatedAtDesc,
		arg.ContentAsc,
		arg.ContentDesc,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Blog{}
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogByID = `-- name: GetBlogByID :one
SELECT id, created_at, updated_at, deleted_at, user_id, title, content, image FROM blogs
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetBlogByID(ctx context.Context, id uuid.UUID) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlogByID, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Image,
	)
	return i, err
}

const updateBlog = `-- name: UpdateBlog :exec
UPDATE 
    blogs
SET
    title = $2,
    content = $3,
    image = $4,
    updated_at = NOW()
WHERE
    id = $1
`

type UpdateBlogParams struct {
	ID      uuid.UUID `json:"id"`
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Image   string    `json:"image"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateBlog,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Image,
	)
	return err
}
