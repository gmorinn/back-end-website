// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteUserByID = `-- name: DeleteUserByID :exec
UPDATE
    users
SET
    deleted_at = NOW()
WHERE 
    id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getAllUser = `-- name: GetAllUser :many
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, role FROM users
WHERE deleted_at IS NULL
ORDER BY
  CASE WHEN $1::bool THEN firstname END asc,
  CASE WHEN $2::bool THEN firstname END desc,
  CASE WHEN $3::bool THEN lastname END asc,
  CASE WHEN $4::bool THEN lastname END desc,
  CASE WHEN $5::bool THEN email END asc,
  CASE WHEN $6::bool THEN email END desc,
  CASE WHEN $7::bool THEN created_at END asc,
  CASE WHEN $8::bool THEN created_at END desc,
  CASE WHEN $9::bool THEN role END asc,
  CASE WHEN $10::bool THEN role END desc
LIMIT $12 OFFSET $11
`

type GetAllUserParams struct {
	FirstnameAsc  bool  `json:"firstname_asc"`
	FirstnameDesc bool  `json:"firstname_desc"`
	LastnameAsc   bool  `json:"lastname_asc"`
	LastnameDesc  bool  `json:"lastname_desc"`
	EmailAsc      bool  `json:"email_asc"`
	EmailDesc     bool  `json:"email_desc"`
	CreatedAtAsc  bool  `json:"created_at_asc"`
	CreatedAtDesc bool  `json:"created_at_desc"`
	RoleAsc       bool  `json:"role_asc"`
	RoleDesc      bool  `json:"role_desc"`
	Offset        int32 `json:"offset"`
	Limit         int32 `json:"limit"`
}

func (q *Queries) GetAllUser(ctx context.Context, arg GetAllUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUser,
		arg.FirstnameAsc,
		arg.FirstnameDesc,
		arg.LastnameAsc,
		arg.LastnameDesc,
		arg.EmailAsc,
		arg.EmailDesc,
		arg.CreatedAtAsc,
		arg.CreatedAtDesc,
		arg.RoleAsc,
		arg.RoleDesc,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, role FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Role,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE 
    users
SET
    role = $2,
    updated_at = NOW()
WHERE
    id = $1
`

type UpdateRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Role Role      `json:"role"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.ID, arg.Role)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE 
    users
SET
    firstname = $2,
    lastname = $3,
    email = $4,
    updated_at = NOW()
WHERE
    id = $1
`

type UpdateUserParams struct {
	ID        uuid.UUID      `json:"id"`
	Firstname sql.NullString `json:"firstname"`
	Lastname  sql.NullString `json:"lastname"`
	Email     string         `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
	)
	return err
}
