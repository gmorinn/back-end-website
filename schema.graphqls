scalar Time
scalar Upload
scalar UUID
scalar Email
scalar URL
scalar JWT
directive @hasRole(role: UserType!) on FIELD_DEFINITION
directive @jwtAuth on FIELD_DEFINITION

enum UserType {
  "User can have access to all data"
  ADMIN
  "User can access specific data but not all"
  PRO
  "User can only see their own data"
  USER
}

type Query {
  "returns one user by his id precising in the payload"
  user(id:UUID!): GetUserResponse! @jwtAuth
  "returns all users with a limit precising in the payload, need to be admin to access"
  users(limit: Int!, offset: Int!): GetUsersResponse! @hasRole(role: ADMIN) @jwtAuth
  "returns all blog with a limit precising in the payload, no need of role to access"
  blogs(limit: Int!, offset: Int!): GetBlogsResponse!
  "returns one blog by his id precising in the payload"
  blog(id:UUID!): GetBlogResponse!
}

"The `File` type, represents the response of uploading a file."
type UploadResponse {
    name: String!
    size: Int!
    url: String!
    success: Boolean!
}

input UploadInput {
  "The file to upload"
  file: Upload!
  "width of the image if it needs to be resized"
  width: Int
  "height of the image if it needs to be resized"
  height: Int
}


type Mutation {
  "connect a user to the application"
  signin(input: SigninInput!): JWTResponse!
  "create a new user"
  signup(input: SignupInput!): JWTResponse!
  "use to refresh the access token"
  refresh(refresh_token: JWT!): JWTResponse!
  "update the user's role"
  updateRole(role: UserType!, id:UUID!): GetUserResponse! @hasRole(role: ADMIN) @jwtAuth
  "upload a file"
  singleUpload(file: UploadInput!): UploadResponse! @jwtAuth
  "create a new blog"
  createBlog(input: CreateBlogInput!): GetBlogResponse! @hasRole(role: ADMIN) @jwtAuth
  "update a blog"
  updateBlog(input: UpdateBlogInput!): GetBlogResponse! @hasRole(role: ADMIN) @jwtAuth
  "delete a blog"
  deleteBlog(id:UUID!): GetBlogResponse! @hasRole(role: ADMIN) @jwtAuth
}

type JWTResponse {
  "jwt token for user to authenticate, contains user id, role and expiry"
  access_token: JWT!
  "use to refresh the access token"
  refresh_token: JWT!
  "true if the user can connect or false if not"
  success: Boolean!
}

input SigninInput {
  "email of the user"
  email: Email!
  "password of the user"
  password: String!
}

input SignupInput {
  "email of the user"
  email: Email!
  "password of the user"
  password: String!
  "confirm password of the user"
  confirm_password: String!
  "firstname of the user"
  firstname: String!
  "lastname of the user"
  lastname: String!
}

"All fields that represent a user"
type UserResponse {
  firstname: String!
  lastname: String!
  email: Email!
  id: UUID!
  role: UserType!
  created_at: Time!
  deleted_at: Time
  updated_at: Time!
}

"All fields that represent a blog"
type BlogResponse {
  user_id: UUID!
  created_at: Time!
  deleted_at: Time
  updated_at: Time!
  title: String!
  content: String!
  image: String!
}

"All fields that represent a project"
type ProjectResponse {
  user_id: UUID!
  created_at: Time!
  deleted_at: Time
  updated_at: Time!
  title: String!
  content: String!
  image: String!
  language: String!
  url: URL!
}

"Response when you get a user"
type GetUserResponse {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return the user if the request was successful"
  user: UserResponse
}

"Response when you get a blog"
type GetBlogResponse {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return the blog if the request was successful"
  user: BlogResponse
}


"Response when you get many blogs"
type GetBlogsResponse {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return an array of blog if the request was successful or null if there is an error or no users"
  users: [BlogResponse]
}

"Response when you get many users"
type GetUsersResponse {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return an array of user if the request was successful or null if there is an error or no users"
  users: [UserResponse]
}

"payload send when you add a user"
input UpdateUserInput {
  "name of the user (required)"
  name: String!
  "email of the user (required)"
  email: Email!
  "firstname of the user (required)"
  firstname: String!
  "lastname of the user (required)"
  lastname: String!
  "id of the user (required)"
  id: UUID!
  "role of the user (required)"
  role: UserType!
}

"payload send when you add a blog"
input UpdateBlogInput {
  "title of the blog (required)"
  title: String!
  "content of the blog (required)"
  content: String!
  "id of the blog (required)"
  id: UUID!
  "image of the blog (required)"
  image: String!
}

input CreateBlogInput {
  "title of the blog (required)"
  title: String!
  "content of the blog (required)"
  content: String!
  "image of the blog (required)"
  image: String!
}