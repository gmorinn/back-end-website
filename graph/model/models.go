// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"back-end-website/graph/mypkg"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

// All fields that represent a blog
type Blog struct {
	ID        mypkg.UUID `json:"id"`
	UserID    mypkg.UUID `json:"user_id"`
	CreatedAt time.Time  `json:"created_at"`
	DeletedAt *time.Time `json:"deleted_at"`
	UpdatedAt time.Time  `json:"updated_at"`
	Title     string     `json:"title"`
	Content   string     `json:"content"`
	Image     string     `json:"image"`
}

type CreateBlogInput struct {
	// title of the blog (required)
	Title string `json:"title"`
	// content of the blog (required)
	Content string `json:"content"`
	// image of the blog (required)
	Image string `json:"image"`
	// user id of the blog (required)
	UserID mypkg.UUID `json:"user_id"`
}

// payload send when you add a Project
type CreateProjectInput struct {
	// title of the Project (required)
	Title string `json:"title"`
	// content of the Project (required)
	Content string `json:"content"`
	// img_cover of the Project (required)
	ImgCover string `json:"img_cover"`
	// img_description of the Project (required)
	ImgDescription string `json:"img_description"`
	// user_id of the Project (required)
	UserID mypkg.UUID `json:"user_id"`
	// language of the Project (required)
	Language string `json:"language"`
	// url of the Project (required)
	URL string `json:"url"`
	// tag of the Project (required)
	Tag ProjectTag `json:"tag"`
}

type JWTResponse struct {
	// jwt token for user to authenticate, contains user id, role and expiry
	AccessToken mypkg.JWT `json:"access_token"`
	// use to refresh the access token
	RefreshToken mypkg.JWT `json:"refresh_token"`
}

// All fields that represent a project
type Project struct {
	ID             mypkg.UUID `json:"id"`
	UserID         mypkg.UUID `json:"user_id"`
	CreatedAt      time.Time  `json:"created_at"`
	DeletedAt      *time.Time `json:"deleted_at"`
	UpdatedAt      time.Time  `json:"updated_at"`
	Title          string     `json:"title"`
	Content        string     `json:"content"`
	Tag            ProjectTag `json:"tag"`
	ImgCover       string     `json:"img_cover"`
	ImgDescription string     `json:"img_description"`
	Language       string     `json:"language"`
	URL            string     `json:"url"`
}

type SigninInput struct {
	// email of the user
	Email mypkg.Email `json:"email"`
	// password of the user
	Password string `json:"password"`
}

type SignupInput struct {
	// email of the user
	Email mypkg.Email `json:"email"`
	// password of the user
	Password string `json:"password"`
	// confirm password of the user
	ConfirmPassword string `json:"confirm_password"`
	// firstname of the user
	Firstname string `json:"firstname"`
	// lastname of the user
	Lastname string `json:"lastname"`
}

// payload send when you add a blog
type UpdateBlogInput struct {
	// title of the blog (required)
	Title string `json:"title"`
	// content of the blog (required)
	Content string `json:"content"`
	// image of the blog (required)
	Image string `json:"image"`
	// user_id of the blog (required)
	UserID mypkg.UUID `json:"user_id"`
	// id of the blog (required)
	ID mypkg.UUID `json:"id"`
}

// payload send when you add a Project
type UpdateProjectInput struct {
	// title of the Project (required)
	Title string `json:"title"`
	// content of the Project (required)
	Content string `json:"content"`
	// img_cover of the Project (required)
	ImgCover string `json:"img_cover"`
	// img_description of the Project (required)
	ImgDescription string `json:"img_description"`
	// user_id of the Project (required)
	UserID mypkg.UUID `json:"user_id"`
	// language of the Project (required)
	Language string `json:"language"`
	// url of the Project (required)
	URL string `json:"url"`
	// id of the Project (required)
	ID mypkg.UUID `json:"id"`
	// tag of the Project (required)
	Tag ProjectTag `json:"tag"`
}

// payload send when you update a user
type UpdateUserInput struct {
	// email of the user (required)
	Email mypkg.Email `json:"email"`
	// firstname of the user (required)
	Firstname string `json:"firstname"`
	// lastname of the user (required)
	Lastname string `json:"lastname"`
	// id of the user (required)
	ID mypkg.UUID `json:"id"`
}

type UploadInput struct {
	// The file to upload
	File graphql.Upload `json:"file"`
	// width of the image if it needs to be resized
	Width *int `json:"width"`
	// height of the image if it needs to be resized
	Height *int `json:"height"`
}

// The `File` type, represents the response of uploading a file.
type UploadResponse struct {
	Name    string `json:"name"`
	Size    int    `json:"size"`
	URL     string `json:"url"`
	Success bool   `json:"success"`
}

// All fields that represent a user
type User struct {
	Firstname string      `json:"firstname"`
	Lastname  string      `json:"lastname"`
	Email     mypkg.Email `json:"email"`
	ID        mypkg.UUID  `json:"id"`
	Role      UserType    `json:"role"`
	CreatedAt time.Time   `json:"created_at"`
	DeletedAt *time.Time  `json:"deleted_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type ProjectTag string

const (
	ProjectTagWebdevelopment ProjectTag = "WEBDEVELOPMENT"
	ProjectTagSocialmedia    ProjectTag = "SOCIALMEDIA"
)

var AllProjectTag = []ProjectTag{
	ProjectTagWebdevelopment,
	ProjectTagSocialmedia,
}

func (e ProjectTag) IsValid() bool {
	switch e {
	case ProjectTagWebdevelopment, ProjectTagSocialmedia:
		return true
	}
	return false
}

func (e ProjectTag) String() string {
	return string(e)
}

func (e *ProjectTag) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectTag(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectTag", str)
	}
	return nil
}

func (e ProjectTag) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserType string

const (
	// User can have access to all data
	UserTypeAdmin UserType = "ADMIN"
	// User can access specific data but not all
	UserTypePro UserType = "PRO"
	// User can only see their own data
	UserTypeUser UserType = "USER"
)

var AllUserType = []UserType{
	UserTypeAdmin,
	UserTypePro,
	UserTypeUser,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeAdmin, UserTypePro, UserTypeUser:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
